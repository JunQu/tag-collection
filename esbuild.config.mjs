import esbuild from "esbuild";
import process from "process";
import builtins from 'builtin-modules'
import fs from 'fs'

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

esbuild.build({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/closebrackets',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/comment',
		'@codemirror/fold',
		'@codemirror/gutter',
		'@codemirror/highlight',
		'@codemirror/history',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/matchbrackets',
		'@codemirror/panel',
		'@codemirror/rangeset',
		'@codemirror/rectangular-selection',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/stream-parser',
		'@codemirror/text',
		'@codemirror/tooltip',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	// watch: !prod,
	target: 'es2020',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'main.js',
})
	.catch(() => process.exit(1))
	.finally(async ()=>{
		const mainJs = 'main.js'
		const manifest = 'manifest.json'
		const pluginPath = '../../obsidian-test/ob-plugins/ob-plugin/.obsidian/plugins/obsidian-tag-collection/'

		const compileJs = `./${mainJs}`
		const manifestLocal = `./${manifest}`

		const pluginJs = `${pluginPath}${mainJs}`
		const pluginManifest = `${pluginPath}${manifest}`

		if (fs.existsSync(compileJs)) {
			console.log('load js: ', pluginJs)
			fs.createReadStream(compileJs).pipe(fs.createWriteStream(pluginJs));
		}
		if (fs.existsSync(manifestLocal)) {
			console.log('load manifest')
			fs.createReadStream(manifestLocal).pipe(fs.createWriteStream(pluginManifest));
		}
	})
